import{_ as e,c as s,o as a,a as t}from"./app.4c04b5ec.js";const b=JSON.parse('{"title":"Job types","description":"","frontmatter":{},"headers":[{"level":2,"title":"CleanRedisStore","slug":"cleanredisstore","link":"#cleanredisstore","children":[]},{"level":2,"title":"CleanStorageFiles","slug":"cleanstoragefiles","link":"#cleanstoragefiles","children":[]},{"level":2,"title":"LanguageSyncTranslations","slug":"languagesynctranslations","link":"#languagesynctranslations","children":[]},{"level":2,"title":"LocaleCopyPairwiseAssociations","slug":"localecopypairwiseassociations","link":"#localecopypairwiseassociations","children":[]},{"level":2,"title":"NutrientTableImportData","slug":"nutrienttableimportdata","link":"#nutrienttableimportdata","children":[]},{"level":2,"title":"NutrientTableImportMapping","slug":"nutrienttableimportmapping","link":"#nutrienttableimportmapping","children":[]},{"level":2,"title":"PurgeRefreshTokens","slug":"purgerefreshtokens","link":"#purgerefreshtokens","children":[]},{"level":2,"title":"SendPasswordReset","slug":"sendpasswordreset","link":"#sendpasswordreset","children":[]},{"level":2,"title":"SurveyDataExport","slug":"surveydataexport","link":"#surveydataexport","children":[]},{"level":2,"title":"SurveyExportRespondentAuthUrls","slug":"surveyexportrespondentauthurls","link":"#surveyexportrespondentauthurls","children":[]},{"level":2,"title":"SurveyImportRespondents","slug":"surveyimportrespondents","link":"#surveyimportrespondents","children":[]},{"level":2,"title":"SurveyRequestHelp","slug":"surveyrequesthelp","link":"#surveyrequesthelp","children":[]},{"level":2,"title":"SurveyRespondentFeedback","slug":"surveyrespondentfeedback","link":"#surveyrespondentfeedback","children":[]},{"level":2,"title":"SurveySubmission","slug":"surveysubmission","link":"#surveysubmission","children":[]},{"level":2,"title":"SurveySubmissionNotification","slug":"surveysubmissionnotification","link":"#surveysubmissionnotification","children":[]}],"relativePath":"admin/system/job-types.md"}'),r={name:"admin/system/job-types.md"},n=t(`<h1 id="job-types" tabindex="-1">Job types <a class="header-anchor" href="#job-types" aria-hidden="true">#</a></h1><p>Jobs types available in system.</p><ul><li><a href="#cleanredisstore">CleanRedisStore</a></li><li><a href="#cleanstoragefiles">CleanStorageFiles</a></li><li><a href="#languagesynctranslations">LanguageSyncTranslations</a></li><li><a href="#localecopypairwiseassociations">LocaleCopyPairwiseAssociations</a></li><li><a href="#nutrienttableimportdata">NutrientTableImportData</a></li><li><a href="#nutrienttableimportmapping">NutrientTableImportMapping</a></li><li><a href="#purgerefreshtokens">PurgeRefreshTokens</a></li><li><a href="#sendpasswordreset">SendPasswordReset</a></li><li><a href="#surveydataexport">SurveyDataExport</a></li><li><a href="#surveyexportrespondentauthurls">SurveyExportRespondentAuthUrls</a></li><li><a href="#surveyimportrespondents">SurveyImportRespondents</a></li><li><a href="#surveyrequesthelp">SurveyRequestHelp</a></li><li><a href="#surveyrespondentfeedback">SurveyRespondentFeedback</a></li><li><a href="#surveysubmission">SurveySubmission</a></li><li><a href="#surveysubmissionnotification">SurveySubmissionNotification</a></li></ul><h2 id="cleanredisstore" tabindex="-1">CleanRedisStore <a class="header-anchor" href="#cleanredisstore" aria-hidden="true">#</a></h2><p><code>CleanRedisStore</code> wipes the specific redis stores. e.g. <code>cache</code> or <code>session</code></p><h2 id="cleanstoragefiles" tabindex="-1">CleanStorageFiles <a class="header-anchor" href="#cleanstoragefiles" aria-hidden="true">#</a></h2><p><code>CleanStorageFiles</code> wipes temporary storage files, e.g. <code>downloads</code> and <code>uploads</code> folders.</p><h2 id="languagesynctranslations" tabindex="-1">LanguageSyncTranslations <a class="header-anchor" href="#languagesynctranslations" aria-hidden="true">#</a></h2><p><code>LanguageSyncTranslations</code> synchronizes database language translation records with built-in English translation.</p><div class="tip custom-block"><p class="custom-block-title">Built-in translations update</p><p>This needs to be run if object structure changes, so all database records are synced to use same structure.</p></div><h2 id="localecopypairwiseassociations" tabindex="-1">LocaleCopyPairwiseAssociations <a class="header-anchor" href="#localecopypairwiseassociations" aria-hidden="true">#</a></h2><p><code>LocaleCopyPairwiseAssociations</code> copies pairwise associations data from source locale to target locale.</p><h2 id="nutrienttableimportdata" tabindex="-1">NutrientTableImportData <a class="header-anchor" href="#nutrienttableimportdata" aria-hidden="true">#</a></h2><p><code>NutrientTableImportData</code> imports data from CSV file containing nutrient data.</p><h2 id="nutrienttableimportmapping" tabindex="-1">NutrientTableImportMapping <a class="header-anchor" href="#nutrienttableimportmapping" aria-hidden="true">#</a></h2><p><code>NutrientTableImportMapping</code> imports Excel-based nutrient mappings from CSV file.</p><h2 id="purgerefreshtokens" tabindex="-1">PurgeRefreshTokens <a class="header-anchor" href="#purgerefreshtokens" aria-hidden="true">#</a></h2><p><code>PurgeRefreshTokens</code> clean expired refresh tokens, that don&#39;t need to be hold in database store anymore.</p><h2 id="sendpasswordreset" tabindex="-1">SendPasswordReset <a class="header-anchor" href="#sendpasswordreset" aria-hidden="true">#</a></h2><p><code>SendPasswordReset</code> is triggered when user requests password reset.</p><h2 id="surveydataexport" tabindex="-1">SurveyDataExport <a class="header-anchor" href="#surveydataexport" aria-hidden="true">#</a></h2><p><code>SurveyDataExport</code> survey submission data to CSV file based on scheme-defined export columns.</p><h2 id="surveyexportrespondentauthurls" tabindex="-1">SurveyExportRespondentAuthUrls <a class="header-anchor" href="#surveyexportrespondentauthurls" aria-hidden="true">#</a></h2><p><code>SurveyExportRespondentAuthUrls</code> survey respondent authentication details (usernames and authentication URLs).</p><h2 id="surveyimportrespondents" tabindex="-1">SurveyImportRespondents <a class="header-anchor" href="#surveyimportrespondents" aria-hidden="true">#</a></h2><p><code>SurveyImportRespondents</code> imports survey respondent records from provided CSV file.</p><p><strong>Available columns</strong></p><table><thead><tr><th>Column</th><th>Description</th><th>Record</th></tr></thead><tbody><tr><td>username</td><td>Required</td><td>UserSurveyAlias</td></tr><tr><td>password</td><td>Required</td><td>UserPassword</td></tr><tr><td>name</td><td>Optional</td><td>User</td></tr><tr><td>email</td><td>Optional</td><td>User</td></tr><tr><td>phone</td><td>Optional</td><td>User</td></tr><tr><td>*</td><td>Optional</td><td>UserCustomField</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">User custom fields</p><p>Any additional column not listed above, will get stored as <code>UserCustomField</code> record, which is <code>key</code> -&gt; <code>value</code> record in database table.</p></div><h2 id="surveyrequesthelp" tabindex="-1">SurveyRequestHelp <a class="header-anchor" href="#surveyrequesthelp" aria-hidden="true">#</a></h2><p><code>SurveyRequestHelp</code> sends request help email to study support users.</p><h2 id="surveyrespondentfeedback" tabindex="-1">SurveyRespondentFeedback <a class="header-anchor" href="#surveyrespondentfeedback" aria-hidden="true">#</a></h2><p><code>SurveyRespondentFeedback</code> sends email with attached survey feedback PDF file to provided email address.</p><h2 id="surveysubmission" tabindex="-1">SurveySubmission <a class="header-anchor" href="#surveysubmission" aria-hidden="true">#</a></h2><p><code>SurveySubmission</code> processes submission state and saves to data.</p><h2 id="surveysubmissionnotification" tabindex="-1">SurveySubmissionNotification <a class="header-anchor" href="#surveysubmissionnotification" aria-hidden="true">#</a></h2><p><code>SurveySubmissionNotification</code> is used with webhook to dispatch survey submission notification.</p><p>When valid <code>Submission notification URL</code> is set in survey settings, webhook is automatically called with each successful submission. Submission data are attached in request body.</p><p>If survey settings specify JWT secret, signed JWT token is attached as Bearer in <code>Authorization</code> header of the request.</p><p>Request</p><div class="language-json"><button class="copy"></button><span class="lang">json</span><pre><code><span class="line"><span style="color:#A6ACCD;">POST https:</span><span style="color:#676E95;">//my-submission-notification-url.example.com</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Authorization: Bearer </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">token</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Type: application/json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,41),i=[n];function o(l,d,p,c,u,h){return a(),s("div",null,i)}const m=e(r,[["render",o]]);export{b as __pageData,m as default};
