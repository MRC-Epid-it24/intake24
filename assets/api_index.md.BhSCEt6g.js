import{_ as e,c as s,o as a,a4 as i}from"./chunks/framework.Bb6_5MlX.js";const m=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"api/index.md","filePath":"api/index.md"}'),n={name:"api/index.md"},t=i(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>REST-based API endpoints use:</p><ul><li><code>application/json</code> content-type</li><li><code>multipart/form-data</code> content type with <code>file</code> payloads</li></ul><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><p>OpenAPI specification is used to describe the API -&gt; <a href="/open-api.html" target="blank">OpenAPI specification</a></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>OpenAPI specification is only available for survey endpoints. Admin endpoints are not yet documented.</p><p>We&#39;re in the process of adding OpenAPI specification for all endpoints.</p></div><h2 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-label="Permalink to &quot;Authentication&quot;">​</a></h2><p>Authorization-protected endpoints require to supply access token (JSON Web Token, a.k.a <code>JWT</code>) (obtained during login) in <code>Authorization</code> http header.</p><h4 id="request" tabindex="-1">Request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;Request&quot;">​</a></h4><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /api/endpoint</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Bearer {accessToken}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/json</span></span></code></pre></div><h4 id="response" tabindex="-1">Response <a class="header-anchor" href="#response" aria-label="Permalink to &quot;Response&quot;">​</a></h4><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OK</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="spa-applications" tabindex="-1">SPA applications <a class="header-anchor" href="#spa-applications" aria-label="Permalink to &quot;SPA applications&quot;">​</a></h3><p>Authentication system for SPA applications is based on combination of short-lived <code>access token</code> and long-lived <code>refresh token</code>.</p><p>Login endpoints issue JWT <code>access tokens</code> in response body. <code>Access token</code> is short-lived JWT and has to be included in <code>Authorization</code> header for specific endpoint.</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /some/end/point</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Bearer {accessToken}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/json</span></span></code></pre></div><p>Response includes cookie with <code>refresh token</code>, which can be used to obtain fresh <code>access token</code>. By default, cookie is <code>http-only</code> (prevents to be read by javascript code) and <code>secure</code> (sent over https-only), please refer to <a href="/config/api/security#json-web-tokens">security configuration</a> for more details.</p><p>Combination of short-lived <code>access token</code> and long-lived <code>refresh token</code> is focused on security and usability within SPA applications. Moreover, account can be protected with multi-factor authentication, which is not suitable for <code>machine-to-machine</code> communication.</p><h3 id="m2m-communication" tabindex="-1">M2M communication <a class="header-anchor" href="#m2m-communication" aria-label="Permalink to &quot;M2M communication&quot;">​</a></h3><p>The use of <code>personal access tokens</code> is recommended for <code>machine-to-machine</code> communication.</p><p>Personal access tokens are long-lived JWT tokens, which can be used to authenticate requests. Personal access tokens are bound to specific user. Personal access tokens can be managed in <a href="/admin/user/personal-access-tokens">admin tool</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Personal access tokens are long lived and should be treated as sensitive data. They has to be stored securely and should never be exposed to public (e.g. embedded into frontend code).</p></div>`,22),o=[t];function c(p,l,d,h,r,k){return a(),s("div",null,o)}const b=e(n,[["render",c]]);export{m as __pageData,b as default};
