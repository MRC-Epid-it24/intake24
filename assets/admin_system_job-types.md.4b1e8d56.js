import{_ as e,c as t,o as a,a as s}from"./app.83317307.js";const b='{"title":"Job types","description":"","frontmatter":{},"headers":[{"level":2,"title":"CleanRedisStore","slug":"cleanredisstore"},{"level":2,"title":"CleanStorageFiles","slug":"cleanstoragefiles"},{"level":2,"title":"PurgeRefreshTokens","slug":"purgerefreshtokens"},{"level":2,"title":"SendPasswordReset","slug":"sendpasswordreset"},{"level":2,"title":"SyncLanguageTranslations","slug":"synclanguagetranslations"},{"level":2,"title":"NutrientTableImportData","slug":"nutrienttableimportdata"},{"level":2,"title":"NutrientTableImportMapping","slug":"nutrienttableimportmapping"},{"level":2,"title":"SurveyDataExport","slug":"surveydataexport"},{"level":2,"title":"SurveyExportRespondentAuthUrls","slug":"surveyexportrespondentauthurls"},{"level":2,"title":"SurveyImportRespondents","slug":"surveyimportrespondents"},{"level":2,"title":"SurveySubmissionNotification","slug":"surveysubmissionnotification"}],"relativePath":"admin/system/job-types.md"}',r={},n=s(`<h1 id="job-types" tabindex="-1">Job types <a class="header-anchor" href="#job-types" aria-hidden="true">#</a></h1><p>Jobs types available in system.</p><p>Available jobs:</p><ul><li>CleanRedisStore</li></ul><h2 id="cleanredisstore" tabindex="-1">CleanRedisStore <a class="header-anchor" href="#cleanredisstore" aria-hidden="true">#</a></h2><p><code>CleanRedisStore</code> wipes the specific redis stores. e.g. <code>cache</code> or <code>session</code></p><h2 id="cleanstoragefiles" tabindex="-1">CleanStorageFiles <a class="header-anchor" href="#cleanstoragefiles" aria-hidden="true">#</a></h2><p><code>CleanStorageFiles</code> wipes temporary storage files, e.g. <code>downloads</code> and <code>uploads</code> folders.</p><h2 id="purgerefreshtokens" tabindex="-1">PurgeRefreshTokens <a class="header-anchor" href="#purgerefreshtokens" aria-hidden="true">#</a></h2><p><code>PurgeRefreshTokens</code> clean expired refresh tokens, that don&#39;t need to be hold in database store anymore.</p><h2 id="sendpasswordreset" tabindex="-1">SendPasswordReset <a class="header-anchor" href="#sendpasswordreset" aria-hidden="true">#</a></h2><p><code>SendPasswordReset</code> is triggered when user requests password reset.</p><h2 id="synclanguagetranslations" tabindex="-1">SyncLanguageTranslations <a class="header-anchor" href="#synclanguagetranslations" aria-hidden="true">#</a></h2><p><code>SyncLanguageTranslations</code> synchronizes database language translation records with built-in English translation.</p><div class="tip custom-block"><p class="custom-block-title">Built-in translations update</p><p>This needs to be run if object structure changes, so all database records are synced to use same structure.</p></div><h2 id="nutrienttableimportdata" tabindex="-1">NutrientTableImportData <a class="header-anchor" href="#nutrienttableimportdata" aria-hidden="true">#</a></h2><p><code>NutrientTableImportData</code> imports data from CSV file containing nutrient data.</p><h2 id="nutrienttableimportmapping" tabindex="-1">NutrientTableImportMapping <a class="header-anchor" href="#nutrienttableimportmapping" aria-hidden="true">#</a></h2><p><code>NutrientTableImportMapping</code> imports Excel-based nutrient mappings from CSV file.</p><h2 id="surveydataexport" tabindex="-1">SurveyDataExport <a class="header-anchor" href="#surveydataexport" aria-hidden="true">#</a></h2><p><code>SurveyDataExport</code> survey submission data to CSV file based on scheme-defined export columns.</p><h2 id="surveyexportrespondentauthurls" tabindex="-1">SurveyExportRespondentAuthUrls <a class="header-anchor" href="#surveyexportrespondentauthurls" aria-hidden="true">#</a></h2><p><code>SurveyExportRespondentAuthUrls</code> survey respondent authentication details (usernames and authentication URLs).</p><h2 id="surveyimportrespondents" tabindex="-1">SurveyImportRespondents <a class="header-anchor" href="#surveyimportrespondents" aria-hidden="true">#</a></h2><p><code>SurveyImportRespondents</code> imports survey respondent records from provided CSV file.</p><p><strong>Available columns</strong></p><table><thead><tr><th>Column</th><th>Description</th><th>Record</th></tr></thead><tbody><tr><td>userName</td><td>Required</td><td>UserSurveyAlias</td></tr><tr><td>password</td><td>Required</td><td>UserSurveyAlias</td></tr><tr><td>name</td><td>Optional</td><td>User</td></tr><tr><td>email</td><td>Optional</td><td>User</td></tr><tr><td>phone</td><td>Optional</td><td>User</td></tr><tr><td>*</td><td>Optional</td><td>UserCustomField</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">User custom fields</p><p>Any additional column not listed above, will get stored as <code>UserCustomField</code> record, which is <code>key</code> -&gt; <code>value</code> record in database table.</p></div><h2 id="surveysubmissionnotification" tabindex="-1">SurveySubmissionNotification <a class="header-anchor" href="#surveysubmissionnotification" aria-hidden="true">#</a></h2><p><code>SurveySubmissionNotification</code> is used with webhook to dispatch survey submission notification.</p><p>When valid <code>Submission notification URL</code> is set in survey settings, webhook is automatically called with each successful submission. Submission data are attached in request body.</p><p>If survey settings specify JWT secret, signed JWT token is attached as Bearer in <code>Authorization</code> header of the request.</p><h4 id="request" tabindex="-1">Request <a class="header-anchor" href="#request" aria-hidden="true">#</a></h4><div class="language-http"><pre><code>POST https://my-submission-notification-url.example.com

<span class="token header"><span class="token header-name keyword">Authorization</span><span class="token punctuation">:</span> <span class="token header-value">Bearer {token}</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/json</span></span>
<span class="token application-json">
<span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</span></code></pre></div>`,34),o=[n];function i(d,l,p,c,u,h){return a(),t("div",null,o)}var g=e(r,[["render",i]]);export{b as __pageData,g as default};
