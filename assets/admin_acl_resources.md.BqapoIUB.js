import{_ as e,c as r,o as s,a4 as o}from"./chunks/framework.L7gT5uOw.js";const b=JSON.parse('{"title":"Resources","description":"","frontmatter":{},"headers":[],"relativePath":"admin/acl/resources.md","filePath":"admin/acl/resources.md"}'),t={name:"admin/acl/resources.md"},c=o('<h1 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h1><p>Resource-based access control list implementation is based on three models:</p><ul><li><code>user</code></li><li><code>role</code></li><li><code>permission</code></li></ul><h2 id="database-structure" tabindex="-1">Database structure <a class="header-anchor" href="#database-structure" aria-label="Permalink to &quot;Database structure&quot;">​</a></h2><p>Relations between the models are defined as follows:</p><ul><li><code>many-to-many</code> between <code>user</code> and <code>role</code></li><li><code>many-to-many</code> between <code>user</code> and <code>permission</code></li><li><code>many-to-many</code> between <code>role</code> and <code>permission</code></li></ul><p>This allows to grant permissions to users in two ways:</p><ul><li>directly associate <code>permission</code> with <code>user</code></li><li>associate <code>permission</code> with <code>user</code> through <code>role</code> (acting as grouping record for a set of permissions)</li></ul><p>Permissions need to be implemented on system-level and are usually distributed as database migration. Under normal circumstances, user won&#39;t need to create / modify / delete permission list.</p><h2 id="resource-permissions" tabindex="-1">Resource permissions <a class="header-anchor" href="#resource-permissions" aria-label="Permalink to &quot;Resource permissions&quot;">​</a></h2><p>Permissions formed from resource name and action (with <code>pipe</code> character separator). Base actions are <code>browse</code>, <code>read</code>, <code>create</code>, <code>edit</code>, <code>delete</code>. Other resource-specific actions follows similar convention.</p><table><thead><tr><th>Permission</th><th>Description</th></tr></thead><tbody><tr><td>resource|browse</td><td>Browse / list resource records</td></tr><tr><td>resource|read</td><td>Read resource record details</td></tr><tr><td>resource|create</td><td>Create new resource record</td></tr><tr><td>resource|edit</td><td>Edit resource record</td></tr><tr><td>resource|delete</td><td>Delete resource record</td></tr><tr><td>resource|securables</td><td>Control <code>securable</code> permissions</td></tr><tr><td>resource|[action]</td><td>Specific resource record action</td></tr></tbody></table><h2 id="special-purpose-permissions" tabindex="-1">Special purpose permissions <a class="header-anchor" href="#special-purpose-permissions" aria-label="Permalink to &quot;Special purpose permissions&quot;">​</a></h2><p>Current Intake24 ACL system also implements couple of V3-based specific permissions.</p><ul><li><p><code>${surveyId}/respondent</code> - grants user respondent access to specific survey based on the <code>surveyId</code>, which is incorporated into permission name. Permission is automatically created when new survey record is created. <code>Survey Respondent</code> page allows to assign permission directly selected user. Whenever respondent record is created either using Admin UI or importing CSV file, this permission is attached directly to user.</p></li><li><p><code>globalsupport</code> - nominates user to receive respondents help request from all surveys.</p></li></ul>',15),d=[c];function i(a,n,l,u,p,m){return s(),r("div",null,d)}const f=e(t,[["render",i]]);export{b as __pageData,f as default};
