import{_ as e,c as a,o as i,a4 as t}from"./chunks/framework.CvR0xHCp.js";const k=JSON.parse('{"title":"Authentication","description":"","frontmatter":{},"headers":[],"relativePath":"api/authentication.md","filePath":"api/authentication.md"}'),n={name:"api/authentication.md"},o=t(`<h1 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-label="Permalink to &quot;Authentication&quot;">​</a></h1><h2 id="spa-applications" tabindex="-1">SPA applications <a class="header-anchor" href="#spa-applications" aria-label="Permalink to &quot;SPA applications&quot;">​</a></h2><p>Authentication system for SPA applications is based on JWT tokens, combination of short-lived <code>access token</code> and long-lived <code>refresh token</code>.</p><p>SPA-application-specific auth routes:</p><ul><li>Admin tool <a href="/api/admin/authentication">admin endpoints</a></li><li>Survey / Feedback frontend <a href="/open-api.html" target="blank">survey endpoints</a></li></ul><p>Login endpoints issue JWT <code>access tokens</code> in response body. <code>Access token</code> is short-lived JWT and has to be included in <code>Authorization</code> header for specific endpoint.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /some/end/point</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Authorization: Bearer {</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">accessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content-Type: application/json</span></span></code></pre></div><p>Response includes cookie with <code>refresh token</code>, which can be used to obtain fresh <code>access token</code>. By default, cookie is <code>http-only</code> (prevents to be read by javascript code) and <code>secure</code> (sent over https-only), please refer to <a href="/config/api/security#json-web-tokens">security configuration</a> for more details.</p><h2 id="machine-to-machine-communication" tabindex="-1">Machine-to-machine communication <a class="header-anchor" href="#machine-to-machine-communication" aria-label="Permalink to &quot;Machine-to-machine communication&quot;">​</a></h2><p>Combination of short-lived <code>access token</code> and long-lived <code>refresh token</code> is focused on security and usability within SPA applications. Moreover, account can be protected with multi-factor authentication, which is not suitable for <code>machine-to-machine</code> communication.</p><p>For integration with other applications, i.e. <code>machine-to-machine</code> communication is preferred, personal access tokens can be used.</p><p>Personal access tokens are long-lived JWT tokens, which can be used to authenticate requests. Personal access tokens are bound to specific user. Personal access tokens can be created in <a href="/admin/user/personal-access-tokens">admin tool</a>.</p>`,12),s=[o];function c(r,d,h,p,l,u){return i(),a("div",null,s)}const f=e(n,[["render",c]]);export{k as __pageData,f as default};
