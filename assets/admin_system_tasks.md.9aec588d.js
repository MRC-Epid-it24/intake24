import{_ as e,c as t,o as a,a as s}from"./app.5c823684.js";const m='{"title":"Tasks","description":"","frontmatter":{},"headers":[{"level":2,"title":"Detail tab","slug":"detail-tab"},{"level":2,"title":"Create / Edit tab","slug":"create-edit-tab"},{"level":2,"title":"Manual task trigger","slug":"manual-task-trigger"},{"level":2,"title":"Available jobs","slug":"available-jobs"}],"relativePath":"admin/system/tasks.md","lastUpdated":1642520690008}',r={},d=s('<h1 id="tasks" tabindex="-1">Tasks <a class="header-anchor" href="#tasks" aria-hidden="true">#</a></h1><p>Tasks resource allows to schedule repeatable jobs or run one-off jobs.</p><h2 id="detail-tab" tabindex="-1">Detail tab <a class="header-anchor" href="#detail-tab" aria-hidden="true">#</a></h2><p>Detail tab displays selected task info.</p><h2 id="create-edit-tab" tabindex="-1">Create / Edit tab <a class="header-anchor" href="#create-edit-tab" aria-hidden="true">#</a></h2><p>Edit tab allows to modify selected task.</p><ul><li><p><code>Name</code> - Unique string within <code>tasks</code> records</p></li><li><p><code>Job</code> - Valid job from provided list</p></li><li><p><code>CRON</code> - Valid <code>cron</code> entry to be used for scheduling</p></li><li><p><code>Active</code> - Scheduler <code>on</code> / <code>off</code> status</p></li><li><p><code>Description</code> - Free text, any details about the particular task</p></li><li><p><code>Task parameters</code> - Additional job specific parameters</p></li></ul><h2 id="manual-task-trigger" tabindex="-1">Manual task trigger <a class="header-anchor" href="#manual-task-trigger" aria-hidden="true">#</a></h2><p>Task can be triggered as one-off job using <code>trigger job</code> button on <code>detail</code> / <code>edit</code> tabs.</p><h2 id="available-jobs" tabindex="-1">Available jobs <a class="header-anchor" href="#available-jobs" aria-hidden="true">#</a></h2><h4 id="cleanredisstore" tabindex="-1">CleanRedisStore <a class="header-anchor" href="#cleanredisstore" aria-hidden="true">#</a></h4><p><code>CleanRedisStore</code> wipes the specific redis stores. e.g. <code>cache</code> or <code>session</code></p><h4 id="cleanstoragefiles" tabindex="-1">CleanStorageFiles <a class="header-anchor" href="#cleanstoragefiles" aria-hidden="true">#</a></h4><p><code>CleanStorageFiles</code> wipes temporary storage files, e.g. <code>downloads</code> and <code>uploads</code> folders.</p><h4 id="purgerefreshtokens" tabindex="-1">PurgeRefreshTokens <a class="header-anchor" href="#purgerefreshtokens" aria-hidden="true">#</a></h4><p><code>PurgeRefreshTokens</code> clean expired refresh tokens, that don&#39;t need to be hold in database store anymore.</p><h4 id="sendpasswordreset" tabindex="-1">SendPasswordReset <a class="header-anchor" href="#sendpasswordreset" aria-hidden="true">#</a></h4><p><code>SendPasswordReset</code> is triggered when user requests password reset.</p><h4 id="synclanguagetranslations" tabindex="-1">SyncLanguageTranslations <a class="header-anchor" href="#synclanguagetranslations" aria-hidden="true">#</a></h4><p><code>SyncLanguageTranslations</code> synchronizes database language translation records with built-in English translation.</p><div class="tip custom-block"><p class="custom-block-title">Built-in translations update</p><p>This needs to be run if object structure changes, so all database records are synced to use same structure.</p></div><h4 id="nutrienttableimportdata" tabindex="-1">NutrientTableImportData <a class="header-anchor" href="#nutrienttableimportdata" aria-hidden="true">#</a></h4><p><code>NutrientTableImportData</code> imports data from CSV file containing nutrient data.</p><h4 id="nutrienttableimportmapping" tabindex="-1">NutrientTableImportMapping <a class="header-anchor" href="#nutrienttableimportmapping" aria-hidden="true">#</a></h4><p><code>NutrientTableImportMapping</code> imports Excel-based nutrient mappings from CSV file.</p><h4 id="surveydataexport" tabindex="-1">SurveyDataExport <a class="header-anchor" href="#surveydataexport" aria-hidden="true">#</a></h4><p><code>SurveyDataExport</code> survey submission data to CSV file based on scheme-defined export columns.</p><h4 id="surveyexportrespondentauthurls" tabindex="-1">SurveyExportRespondentAuthUrls <a class="header-anchor" href="#surveyexportrespondentauthurls" aria-hidden="true">#</a></h4><p><code>SurveyExportRespondentAuthUrls</code> survey respondent authentication details (usernames and authentication URLs).</p><h4 id="surveyimportrespondents" tabindex="-1">SurveyImportRespondents <a class="header-anchor" href="#surveyimportrespondents" aria-hidden="true">#</a></h4><p><code>SurveyImportRespondents</code> imports survey respondent records from provided CSV file.</p><p><strong>Available columns</strong></p><table><thead><tr><th>Column</th><th>Description</th><th>Record</th></tr></thead><tbody><tr><td>userName</td><td>Required</td><td>UserSurveyAlias</td></tr><tr><td>password</td><td>Required</td><td>UserSurveyAlias</td></tr><tr><td>name</td><td>Optional</td><td>User</td></tr><tr><td>email</td><td>Optional</td><td>User</td></tr><tr><td>phone</td><td>Optional</td><td>User</td></tr><tr><td>*</td><td>Optional</td><td>UserCustomField</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">User custom fields</p><p>Any additional column not listed above, will get stored as <code>UserCustomField</code> record, which is <code>key</code> -&gt; <code>value</code> record in database table.</p></div><h4 id="surveysubmissionnotification" tabindex="-1">SurveySubmissionNotification <a class="header-anchor" href="#surveysubmissionnotification" aria-hidden="true">#</a></h4><p><code>SurveySubmissionNotification</code> used by webhook to call survey submission notification. Calls the <code>submission URL</code> defined in survey settings. It call <code>POST</code> request and attached whole submission</p><ul><li>reuqest</li></ul>',37),o=[d];function i(n,c,l,h,p,u){return a(),t("div",null,o)}var f=e(r,[["render",i]]);export{m as __pageData,f as default};
