import{_ as e,o as a,c as t,R as o}from"./chunks/framework.1625126e.js";const m=JSON.parse('{"title":"Job types","description":"","frontmatter":{},"headers":[],"relativePath":"admin/system/job-types.md","filePath":"admin/system/job-types.md"}'),s={name:"admin/system/job-types.md"},i=o(`<h1 id="job-types" tabindex="-1">Job types <a class="header-anchor" href="#job-types" aria-label="Permalink to &quot;Job types&quot;">​</a></h1><p>Jobs types available in system.</p><ul><li><a href="#job-types">Job types</a><ul><li><a href="#cleanredisstore">CleanRedisStore</a></li><li><a href="#cleanstoragefiles">CleanStorageFiles</a></li><li><a href="#languagetranslationssync">LanguageTranslationsSync</a></li><li><a href="#localefoodnutrientmapping">LocaleFoodNutrientMapping</a></li><li><a href="#nutrienttabledataimport">NutrientTableDataImport</a></li><li><a href="#nutrienttableimappingimport">NutrientTableIMappingImport</a></li><li><a href="#pairwisesearchcopyassociations">PairwiseSearchCopyAssociations</a></li><li><a href="#popularitysearchupdatecounters">PopularitySearchUpdateCounters</a></li><li><a href="#purgerefreshtokens">PurgeRefreshTokens</a></li><li><a href="#surveydataexport">SurveyDataExport</a></li><li><a href="#surveyauthurlsexport">SurveyAuthUrlsExport</a></li><li><a href="#surveyfeedbacknotification">SurveyFeedbackNotification</a></li><li><a href="#surveyrespondentsimport">SurveyRespondentsImport</a></li><li><a href="#surveyhelprequestnotification">SurveyHelpRequestNotification</a></li><li><a href="#surveysubmission">SurveySubmission</a></li><li><a href="#surveysubmissionnotification">SurveySubmissionNotification</a></li><li><a href="#userpasswordresetnotification">UserPasswordResetNotification</a></li><li><a href="#useremailverificationnotification">UserEmailVerificationNotification</a></li></ul></li></ul><h2 id="cleanredisstore" tabindex="-1">CleanRedisStore <a class="header-anchor" href="#cleanredisstore" aria-label="Permalink to &quot;CleanRedisStore&quot;">​</a></h2><p><code>CleanRedisStore</code> wipes the specific redis stores. e.g. <code>cache</code> or <code>session</code></p><h2 id="cleanstoragefiles" tabindex="-1">CleanStorageFiles <a class="header-anchor" href="#cleanstoragefiles" aria-label="Permalink to &quot;CleanStorageFiles&quot;">​</a></h2><p><code>CleanStorageFiles</code> wipes temporary storage files, e.g. <code>downloads</code> and <code>uploads</code> folders.</p><h2 id="languagetranslationssync" tabindex="-1">LanguageTranslationsSync <a class="header-anchor" href="#languagetranslationssync" aria-label="Permalink to &quot;LanguageTranslationsSync&quot;">​</a></h2><p><code>LanguageTranslationsSync</code> synchronizes database language translation records with built-in English translation.</p><div class="tip custom-block"><p class="custom-block-title">Built-in translations update</p><p>This needs to be run if object structure changes, so all database records are synced to use same structure.</p></div><h2 id="localefoodnutrientmapping" tabindex="-1">LocaleFoodNutrientMapping <a class="header-anchor" href="#localefoodnutrientmapping" aria-label="Permalink to &quot;LocaleFoodNutrientMapping&quot;">​</a></h2><p><code>LocaleFoodNutrientMapping</code> export food nutrient mapping data for selected locale.</p><h2 id="nutrienttabledataimport" tabindex="-1">NutrientTableDataImport <a class="header-anchor" href="#nutrienttabledataimport" aria-label="Permalink to &quot;NutrientTableDataImport&quot;">​</a></h2><p><code>NutrientTableDataImport</code> imports data from CSV file containing nutrient data.</p><h2 id="nutrienttableimappingimport" tabindex="-1">NutrientTableIMappingImport <a class="header-anchor" href="#nutrienttableimappingimport" aria-label="Permalink to &quot;NutrientTableIMappingImport&quot;">​</a></h2><p><code>NutrientTableIMappingImport</code> imports Excel-based nutrient mappings from CSV file.</p><h2 id="pairwisesearchcopyassociations" tabindex="-1">PairwiseSearchCopyAssociations <a class="header-anchor" href="#pairwisesearchcopyassociations" aria-label="Permalink to &quot;PairwiseSearchCopyAssociations&quot;">​</a></h2><p><code>PairwiseSearchCopyAssociations</code> copies pairwise associations data from source locale to target locale.</p><h2 id="popularitysearchupdatecounters" tabindex="-1">PopularitySearchUpdateCounters <a class="header-anchor" href="#popularitysearchupdatecounters" aria-label="Permalink to &quot;PopularitySearchUpdateCounters&quot;">​</a></h2><p><code>PopularitySearchUpdateCounters</code> increments popularity search counters based on provided food codes from survey submission.</p><h2 id="purgerefreshtokens" tabindex="-1">PurgeRefreshTokens <a class="header-anchor" href="#purgerefreshtokens" aria-label="Permalink to &quot;PurgeRefreshTokens&quot;">​</a></h2><p><code>PurgeRefreshTokens</code> clean expired refresh tokens, that don&#39;t need to be hold in database store anymore.</p><h2 id="surveydataexport" tabindex="-1">SurveyDataExport <a class="header-anchor" href="#surveydataexport" aria-label="Permalink to &quot;SurveyDataExport&quot;">​</a></h2><p><code>SurveyDataExport</code> survey submission data to CSV file based on scheme-defined export columns.</p><h2 id="surveyauthurlsexport" tabindex="-1">SurveyAuthUrlsExport <a class="header-anchor" href="#surveyauthurlsexport" aria-label="Permalink to &quot;SurveyAuthUrlsExport&quot;">​</a></h2><p><code>SurveyAuthUrlsExport</code> survey respondent authentication details (usernames and authentication URLs).</p><h2 id="surveyfeedbacknotification" tabindex="-1">SurveyFeedbackNotification <a class="header-anchor" href="#surveyfeedbacknotification" aria-label="Permalink to &quot;SurveyFeedbackNotification&quot;">​</a></h2><p><code>SurveyFeedbackNotification</code> sends email with attached survey feedback PDF file to provided email address.</p><h2 id="surveyrespondentsimport" tabindex="-1">SurveyRespondentsImport <a class="header-anchor" href="#surveyrespondentsimport" aria-label="Permalink to &quot;SurveyRespondentsImport&quot;">​</a></h2><p><code>SurveyRespondentsImport</code> imports survey respondent records from provided CSV file.</p><p><strong>Available columns</strong></p><table><thead><tr><th>Column</th><th>Description</th><th>Record</th></tr></thead><tbody><tr><td>username</td><td>Required</td><td>UserSurveyAlias</td></tr><tr><td>password</td><td>Required</td><td>UserPassword</td></tr><tr><td>name</td><td>Optional</td><td>User</td></tr><tr><td>email</td><td>Optional</td><td>User</td></tr><tr><td>phone</td><td>Optional</td><td>User</td></tr><tr><td>*</td><td>Optional</td><td>UserCustomField</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">User custom fields</p><p>Any additional column not listed above, will get stored as <code>UserCustomField</code> record, which is <code>key</code> -&gt; <code>value</code> record in database table.</p></div><h2 id="surveyhelprequestnotification" tabindex="-1">SurveyHelpRequestNotification <a class="header-anchor" href="#surveyhelprequestnotification" aria-label="Permalink to &quot;SurveyHelpRequestNotification&quot;">​</a></h2><p><code>SurveyHelpRequestNotification</code> sends request help email to study support users.</p><h2 id="surveysubmission" tabindex="-1">SurveySubmission <a class="header-anchor" href="#surveysubmission" aria-label="Permalink to &quot;SurveySubmission&quot;">​</a></h2><p><code>SurveySubmission</code> processes submission state and saves to data.</p><h2 id="surveysubmissionnotification" tabindex="-1">SurveySubmissionNotification <a class="header-anchor" href="#surveysubmissionnotification" aria-label="Permalink to &quot;SurveySubmissionNotification&quot;">​</a></h2><p><code>SurveySubmissionNotification</code> is used with webhook to dispatch survey submission notification.</p><p>When valid <code>Submission notification URL</code> is set in survey settings, webhook is automatically called with each successful submission. Submission data are attached in request body.</p><p>If survey settings specify JWT secret, signed JWT token is attached as Bearer in <code>Authorization</code> header of the request.</p><p>Request</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">POST https:</span><span style="color:#676E95;font-style:italic;">//my-submission-notification-url.example.com</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Authorization: Bearer </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">token</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Type: application/json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="userpasswordresetnotification" tabindex="-1">UserPasswordResetNotification <a class="header-anchor" href="#userpasswordresetnotification" aria-label="Permalink to &quot;UserPasswordResetNotification&quot;">​</a></h2><p><code>UserPasswordResetNotification</code> is triggered when user requests password reset.</p><h2 id="useremailverificationnotification" tabindex="-1">UserEmailVerificationNotification <a class="header-anchor" href="#useremailverificationnotification" aria-label="Permalink to &quot;UserEmailVerificationNotification&quot;">​</a></h2><p><code>UserEmailVerificationNotification</code> is triggered when new user signs up.</p>`,47),r=[i];function n(l,d,c,p,u,h){return a(),t("div",null,r)}const y=e(s,[["render",n]]);export{m as __pageData,y as default};
