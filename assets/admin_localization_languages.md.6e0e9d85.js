import{_ as a,c as e,o as s,a as n}from"./app.f3069d0f.js";const y=JSON.parse('{"title":"Languages","description":"","frontmatter":{},"headers":[{"level":2,"title":"Detail","slug":"detail"},{"level":2,"title":"Create / Edit","slug":"create-edit"},{"level":2,"title":"Translations","slug":"translations"},{"level":2,"title":"Deletion","slug":"deletion"}],"relativePath":"admin/localization/languages.md"}'),l={name:"admin/localization/languages.md"},t=n(`<h1 id="languages" tabindex="-1">Languages <a class="header-anchor" href="#languages" aria-hidden="true">#</a></h1><p>Intake24 bundles only English texts by default. Additional languages can be defined in following sections. Additional languages can be added to source code and bundled or defined in database.</p><p>Languages are then associated with locales and they are displayed as a list of available languages in frontend UI (<code>admin tool</code> or <code>survey recall</code>).</p><h2 id="detail" tabindex="-1">Detail <a class="header-anchor" href="#detail" aria-hidden="true">#</a></h2><p>Detail tab displays selected language info.</p><h2 id="create-edit" tabindex="-1">Create / Edit <a class="header-anchor" href="#create-edit" aria-hidden="true">#</a></h2><p>Edit tab allows to modify selected language.</p><ul><li><p><code>Language ID</code> - valid locale ID and unique string within <code>language</code> records</p></li><li><p><code>Country flag code</code> - Country code to select correct flag</p></li><li><p><code>English name</code> - English name of the language (e.g. Czech)</p></li><li><p><code>Local name</code> - Local name of the language (e.g. \u010Ce\u0161tina)</p></li><li><p><code>Text direction</code> - Read / write direction of text. Valid options are <code>ltr</code> or <code>rlt</code></p></li></ul><h2 id="translations" tabindex="-1">Translations <a class="header-anchor" href="#translations" aria-hidden="true">#</a></h2><p>When new language is created, default translations for frontend applications are copied to language record and can be modified / localized to the desired language.</p><p>Translations tab shows the list of <code>application - section</code> records, which contains <code>key -&gt; value</code> translations. These can be modified / localized.</p><p>When user visits frontend application or manually changes language in user profile, it fetches available languages from server, so they get updated translations</p><div class="tip custom-block"><p class="custom-block-title">Built-in translations updates</p><p>If default built-in translations structure was modified, job <code>SyncLanguageTranslations</code> should be triggered / run. It updates all language translations to up-to-date structure.</p><p>It can potentially result in data loss in predicted way. Translation files are simple <code>js</code> object literals / json.</p><p>See below example of when original in-built structure was simple string and new translation got expanded and became object of strings. New object is taken and original string removed -&gt; this translation then gets discarded and new object with all it&#39;s keys (and default English values) needs to be translated.</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// original translation</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">section</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Section</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// new translation</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">section</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">title</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Section</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></div><h2 id="deletion" tabindex="-1">Deletion <a class="header-anchor" href="#deletion" aria-hidden="true">#</a></h2><p>Language deletion won&#39;t be permitted if there are locales using it. User firstly needs to update the locales to use different language.</p>`,15),o=[t];function i(c,p,r,d,g,u){return s(),e("div",null,o)}var F=a(l,[["render",i]]);export{y as __pageData,F as default};
