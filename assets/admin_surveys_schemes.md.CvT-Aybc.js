import{_ as o,c as i,o as d,ag as l}from"./chunks/framework.ymCRTBvy.js";const f=JSON.parse('{"title":"Survey schemes","description":"","frontmatter":{"outline":{"level":[2,3]}},"headers":[],"relativePath":"admin/surveys/schemes.md","filePath":"admin/surveys/schemes.md"}'),a={name:"admin/surveys/schemes.md"};function t(s,e,r,c,n,u){return d(),i("div",null,e[0]||(e[0]=[l('<h1 id="survey-schemes" tabindex="-1">Survey schemes <a class="header-anchor" href="#survey-schemes" aria-label="Permalink to &quot;Survey schemes&quot;">​</a></h1><p>Survey recall flow is defined by scheme, which has couple of sections.</p><h2 id="detail" tabindex="-1">Detail <a class="header-anchor" href="#detail" aria-label="Permalink to &quot;Detail&quot;">​</a></h2><p>Detail tab displays selected survey scheme info.</p><h2 id="create-edit" tabindex="-1">Create / Edit <a class="header-anchor" href="#create-edit" aria-label="Permalink to &quot;Create / Edit&quot;">​</a></h2><p>Edit tab allows to modify selected survey scheme.</p><ul><li><p><code>Name</code> - <code>survey-scheme-wide</code> unique name</p></li><li><p><code>Visibility</code> - Record visibility, valid options are <code>public</code> or <code>restricted</code> (<a href="/admin/acl/securables#record-visibility">record visibility</a>).</p></li></ul><h3 id="settings" tabindex="-1">Settings <a class="header-anchor" href="#settings" aria-label="Permalink to &quot;Settings&quot;">​</a></h3><h4 id="type" tabindex="-1">Type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;Type&quot;">​</a></h4><p>Placeholder at the moment for future to allow to define various types of survey schemes</p><h4 id="flow" tabindex="-1">Flow <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;Flow&quot;">​</a></h4><p>Recall flow, valid options are <code>1-pass</code> or <code>2-pass</code> (default).</p><ul><li><code>1-pass</code> - Flow goes through each meal including foods portion size estimation in order to complete the meal</li><li><code>2-pass</code> - Flow goes through each meal two times <ul><li><code>first pass</code> - Flow goes through each meal to collect meal info and foods (without portion size estimation)</li><li><code>second pass</code> - Flow goes through each meal to collect portion size estimation</li></ul></li></ul><h4 id="recall-date-offset" tabindex="-1">Recall date offset <a class="header-anchor" href="#recall-date-offset" aria-label="Permalink to &quot;Recall date offset&quot;">​</a></h4><p>Recall date offset in whole days.</p><ul><li><code>empty</code> - survey won&#39;t record recall date</li><li><code>integer</code> - survey records recall date with specified offset from start of survey (e.g. <code>-1</code> for yesterday)</li><li>Respondent can override / nominate their own recall date if <a href="/admin/surveys/prompt-types#recall-date-prompt"><code>recall date prompt</code></a> is included in the scheme</li></ul><h4 id="languages" tabindex="-1">Languages <a class="header-anchor" href="#languages" aria-label="Permalink to &quot;Languages&quot;">​</a></h4><p>Languages participants can select to complete the survey in.</p><h4 id="help" tabindex="-1">Help <a class="header-anchor" href="#help" aria-label="Permalink to &quot;Help&quot;">​</a></h4><p>Help form configuration for the survey.</p><ul><li><code>available fields</code> - List of fields available in help form <ul><li><code>name</code> - Name field</li><li><code>email</code> - Email field</li><li><code>phone</code> - Phone field</li><li><code>message</code> - Message field</li></ul></li></ul><p>If no fields are selected, help form will be disabled.</p><ul><li><code>required fields</code> - List of required fields in help form <ul><li><code>name</code> - Name field is required</li><li><code>email</code> - Email field is required</li><li><code>phone</code> - Phone field is required</li><li><code>email|phone</code> - Email or Phone field is required</li><li><code>message</code> - Message field is required</li></ul></li></ul><h3 id="default-meals" tabindex="-1">Default meals <a class="header-anchor" href="#default-meals" aria-label="Permalink to &quot;Default meals&quot;">​</a></h3><p>List of predefined meals that will appear at the start of the recall.</p><p>Section allows to manage default meal list.</p><ul><li>Create / edit / remove / re-arrange meals with default properties</li><li>Load whole meal list from different scheme</li><li>Reset the list to default one</li></ul><h4 id="meal-name" tabindex="-1">Meal name <a class="header-anchor" href="#meal-name" aria-label="Permalink to &quot;Meal name&quot;">​</a></h4><p>Localized meal name can be set up for each language.</p><h4 id="default-time" tabindex="-1">Default time <a class="header-anchor" href="#default-time" aria-label="Permalink to &quot;Default time&quot;">​</a></h4><p>Default meal time which is pre-filled in the recall.</p><h4 id="meal-flags" tabindex="-1">Meal flags <a class="header-anchor" href="#meal-flags" aria-label="Permalink to &quot;Meal flags&quot;">​</a></h4><p>Meal can be assigned with two type of flags:</p><ul><li><code>standard flags</code> - flags that are used in the system with specific functionality <ul><li><code>meal-time:confirmed</code> - meal time is pre-confirmed using <code>default time</code> and user is not asked to confirm it</li><li><code>meal-time:disabled</code> - meal time is not editable by user</li><li><code>meal-time:hidden</code> - meal time is hidden (not visible in meal list UI)</li></ul></li><li><code>custom flags</code> - flags that can be used for custom purposes, like prompt conditional logic</li></ul><h2 id="prompts" tabindex="-1">Prompts <a class="header-anchor" href="#prompts" aria-label="Permalink to &quot;Prompts&quot;">​</a></h2><p>Prompts tab allows to design dietary survey recall flow and define details about each prompt asked.</p><p>Prompts are categorized to sections and they are asked in specified fixed order. See table below.</p><table tabindex="0"><thead><tr><th>Section</th><th>Description</th></tr></thead><tbody><tr><td>1. Pre-meal</td><td>Prompts asked about whole recall before dietary data entered</td></tr><tr><td>2. Pre-foods</td><td>Prompts asked about meal before foods were entered</td></tr><tr><td>3. Foods</td><td>Prompts asked about the foods</td></tr><tr><td>4. Post-foods</td><td>Prompts asked about meal after foods were entered</td></tr><tr><td>5. Post-meal</td><td>Prompts asked about whole recall after dietary data</td></tr><tr><td>6. Submission</td><td>Prompts asked during data submissions</td></tr></tbody></table><p>Whole prompt sections group can be loaded from another scheme using <code>load from scheme</code> button.</p><p>When prompt section is selected, list of prompts appear below:</p><ul><li>New prompts can be added</li><li>Prompts can be removed</li><li>List of prompts can be re-arranged by drag &amp; drop</li><li>Prompt can be loaded from <code>template</code> defined in <code>scheme prompts</code> section</li><li>Prompt can be saved as <code>template</code> if it doesn&#39;t exist yet (determined by unique <code>prompt id</code>)</li><li>Prompt&#39;s settings can be synced from <code>template</code> if it exists (determined by unique <code>prompt id</code>)</li></ul><h2 id="data-export" tabindex="-1">Data export <a class="header-anchor" href="#data-export" aria-label="Permalink to &quot;Data export&quot;">​</a></h2><p>Data export tab allows to define fields, which will get exported to flattened CSV file having <code>food-per-row</code> with all additional fields.</p><p>Data export fields are grouped to sections.</p><table tabindex="0"><thead><tr><th>Section</th><th>Description</th></tr></thead><tbody><tr><td>User record fields</td><td><code>users</code> table row based fields</td></tr><tr><td>User custom fields</td><td><code>key:value</code> pairs from <code>user_custom_fields</code> table</td></tr><tr><td>Survey record fields</td><td><code>surveys</code> table row based fields</td></tr><tr><td>Submission record fields</td><td><code>survey_submissions</code> table row based fields</td></tr><tr><td>Submission custom fields</td><td><code>key:value</code> pairs from <code>survey_submission_custom_fields</code> table</td></tr><tr><td>Meal record fields</td><td><code>survey_submission_meals</code> table row based fields</td></tr><tr><td>Meal custom fields</td><td><code>key:value</code> pairs from <code>survey_submission_meal_custom_fields</code> table</td></tr><tr><td>Food record fields</td><td><code>survey_submission_foods</code> and <code>survey_submission_missing_foods</code> table row based fields</td></tr><tr><td>Food custom fields</td><td><code>key:value</code> pairs from <code>survey_submission_food_custom_fields</code> table</td></tr><tr><td>Food composition fields</td><td><code>key:value</code> pairs from <code>nutrient_table_records_fields</code> table</td></tr><tr><td>Food nutrient fields</td><td><code>nutrient_types</code> table row based fields</td></tr><tr><td>Portion size fields</td><td><code>key:value</code> pairs from <code>survey_submission_portion_size_fields</code> table</td></tr><tr><td>External source fields</td><td><code>survey_submission_external_sources</code> table row based fields</td></tr></tbody></table><p>Sections can be re-arranged by drag &amp; drop and they will appear accordingly in export file.</p><p>Each section can be edited. Screen is divided in half to show included fields on left and available fields for inclusion on right.</p><p>Each field has:</p><ul><li><code>Field ID</code> - unique field identifier to internal link the data</li><li><code>Field label</code> - customizable CSV column header in export file</li></ul><h4 id="user-record-fields" tabindex="-1">User record fields <a class="header-anchor" href="#user-record-fields" aria-label="Permalink to &quot;User record fields&quot;">​</a></h4><ul><li><code>userId</code> - unique user identifier, sequence number</li><li><code>name</code> - user name</li><li><code>simpleName</code> - transformed user name, stripped off any diacritic / accent characters</li><li><code>email</code> - user email</li><li><code>phone</code> - user phone number</li></ul><h4 id="user-custom-fields" tabindex="-1">User custom fields <a class="header-anchor" href="#user-custom-fields" aria-label="Permalink to &quot;User custom fields&quot;">​</a></h4><p>User custom fields are key-value pairs, set up during respondent account creation.</p><h4 id="survey-record-fields" tabindex="-1">Survey record fields <a class="header-anchor" href="#survey-record-fields" aria-label="Permalink to &quot;Survey record fields&quot;">​</a></h4><ul><li><code>surveyId</code> - unique survey identifier, sequence number</li><li><code>username</code> - survey-unique respondent identifier attached to both user and survey record (aka <code>user survey alias</code>)</li><li><code>slug</code> - unique survey slug (code), which forms part of the survey URL (aka <code>https://intake24.org/{SLUG}/recall</code>)</li></ul><h4 id="submission-record-fields" tabindex="-1">Submission record fields <a class="header-anchor" href="#submission-record-fields" aria-label="Permalink to &quot;Submission record fields&quot;">​</a></h4><ul><li><code>submissionId</code> - unique submission identifier, UUIDv4</li><li><code>recallDate</code> - client-recorded recall date, ISO 8601 format</li><li><code>startTime</code> - client-recorded recall start time, ISO 8601 format</li><li><code>endTime</code> - client-recorded recall end time, ISO 8601 format</li><li><code>submissionTime</code> - server-recorded submission time, ISO 8601 format</li><li><code>recallDuration</code> - recall duration in mins (calculated value <code>endTime - startTime</code>, <code>truncate</code>-rounded)</li><li><code>userAgent</code> - client device raw user agent header</li><li><code>browser</code> - client device browser name (user-agent parsed)</li><li><code>engine</code> - client device browser engine name (user-agent parsed)</li><li><code>device</code> - client device name (user-agent parsed)</li><li><code>os</code> - client device operating system name (user-agent parsed)</li><li><code>cpu</code> - client device CPU architecture (user-agent parsed)</li></ul><h4 id="submission-custom-fields" tabindex="-1">Submission custom fields <a class="header-anchor" href="#submission-custom-fields" aria-label="Permalink to &quot;Submission custom fields&quot;">​</a></h4><p>Submission-level custom data collected during the recall.</p><ul><li><code>Field ID</code> is the unique <code>Prompt ID</code> set up in scheme prompts section</li></ul><h4 id="meal-record-fields" tabindex="-1">Meal record fields <a class="header-anchor" href="#meal-record-fields" aria-label="Permalink to &quot;Meal record fields&quot;">​</a></h4><ul><li><code>mealIndex</code> - zero-based meal index in the recall generated during data-export based on sorted meal time</li><li><code>mealId</code> - unique meal identifier, UUIDv4</li><li><code>name</code> - meal name</li><li><code>time</code> - meal time (HH:mm)</li><li><code>duration</code> - meal duration (mins)</li></ul><h4 id="meal-custom-fields" tabindex="-1">Meal custom fields <a class="header-anchor" href="#meal-custom-fields" aria-label="Permalink to &quot;Meal custom fields&quot;">​</a></h4><p>Meal-level custom data collected during the recall.</p><ul><li><code>Field ID</code> is the unique <code>Prompt ID</code> set up in scheme prompts section</li></ul><h4 id="food-record-fields" tabindex="-1">Food record fields <a class="header-anchor" href="#food-record-fields" aria-label="Permalink to &quot;Food record fields&quot;">​</a></h4><p>Contains <code>encoded food</code> and <code>missing food</code> records data</p><p><strong>Common fields</strong></p><ul><li><code>foodIndex</code> - zero-based food index within a meal (includes encoded food and missing food records)</li><li><code>parentId</code> - unique food identifier of parent food, UUIDv4</li></ul><p><strong>Food record fields</strong></p><ul><li><code>foodId</code> - unique food identifier, UUIDv4</li><li><code>code</code> - Food code</li><li><code>englishName</code> - Food name (English)</li><li><code>localName</code> - Food name (local)</li><li><code>readyMeal</code> - Flag indicating if food is ready meal</li><li><code>searchTerm</code> - Search term used to find the food</li><li><code>reasonableAmount</code> - Flag indicating if food amount is reasonable</li><li><code>foodGroupId</code> - Food group identifier, sequence number</li><li><code>foodGroupEnglishName</code> - Food group name (English)</li><li><code>foodGroupLocalName</code> - Food group name (local)</li><li><code>brand</code> - Food brand</li><li><code>barcode</code> - Food barcode</li><li><code>nutrientTableId</code> - Nutrient table identifier</li><li><code>nutrientTableCode</code> - Nutrient table code</li></ul><p><strong>Missing Food record fields</strong></p><ul><li><code>missingId</code> - unique missing food identifier, UUIDv4</li><li><code>missingName</code> - Missing food name</li><li><code>missingBrand</code> - Missing food brand</li><li><code>missingBarcode</code> - Missing food barcode</li><li><code>missingDescription</code> - Missing food description</li><li><code>missingPortionSize</code> - Missing food portion size</li><li><code>missingLeftovers</code> - Missing food leftovers</li></ul><h4 id="food-custom-fields" tabindex="-1">Food custom fields <a class="header-anchor" href="#food-custom-fields" aria-label="Permalink to &quot;Food custom fields&quot;">​</a></h4><p>Food-level custom data collected during the recall.</p><ul><li><code>Field ID</code> is the unique <code>Prompt ID</code> set up in scheme prompts section</li></ul><h4 id="food-composition-fields" tabindex="-1">Food composition fields <a class="header-anchor" href="#food-composition-fields" aria-label="Permalink to &quot;Food composition fields&quot;">​</a></h4><p>List of available food composition fields from nutrient table</p><h4 id="food-nutrient-fields" tabindex="-1">Food nutrient fields <a class="header-anchor" href="#food-nutrient-fields" aria-label="Permalink to &quot;Food nutrient fields&quot;">​</a></h4><p>List of available nutrient type fields</p><h4 id="portion-size-fields" tabindex="-1">Portion size fields <a class="header-anchor" href="#portion-size-fields" aria-label="Permalink to &quot;Portion size fields&quot;">​</a></h4><p>List of portion size fields based on collection portion size methods</p><ul><li><code>portion</code> - Stringified whole portion size object</li><li><code>portionMethod</code> - Portion size method ID</li><li><code>portionWeight</code> - Calculated portion weight (<code>servingWeight</code> - <code>leftoversWeight</code>)</li><li><code>servingWeight</code> - Food weight in grams</li><li><code>leftoversWeight</code> - Leftovers weight in grams</li></ul><h4 id="external-source-fields" tabindex="-1">External source fields <a class="header-anchor" href="#external-source-fields" aria-label="Permalink to &quot;External source fields&quot;">​</a></h4><p>List of external source fields. Data can be collected from multiple sources, so Field IDs are in format <code>{source}:{field}</code>.</p><ul><li><code>{source}:id</code> - unique external source identifier, UUIDv4</li><li><code>{source}:source</code> - source identifier (e.g. <code>&#39;open-food-facts&#39;</code>)</li><li><code>{source}:searchTerm</code> - unique external source identifier, UUIDv4</li><li><code>{source}:type</code> - selection type (<code>&#39;selected&#39; | &#39;missing&#39;</code>)</li><li><code>{source}:data</code> - json serialized external source data</li><li><code>{source}:data.path.to.field</code> - <code>dot-notation</code> json path to extract field value</li></ul>',86)]))}const h=o(a,[["render",t]]);export{f as __pageData,h as default};
