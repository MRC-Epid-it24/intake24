import{_ as s,c as e,o as t,a4 as a}from"./chunks/framework.BWvgD2EV.js";const k=JSON.parse('{"title":"Testing","description":"","frontmatter":{},"headers":[],"relativePath":"developer/testing.md","filePath":"developer/testing.md"}'),n={name:"developer/testing.md"},i=a(`<h1 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h1><p>Tests are set up with <a href="https://jestjs.io" target="_blank" rel="noreferrer">Jest</a> framework.</p><p>All tests can be triggered from top-level repository structure.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>API Server integration test and some unit tests interacts with database, so be sure to set up empty testing databases and <code>__tests__/.env-test</code> file correctly. See below for more details.</p></div><p>Tests are always located in <code>__tests__</code> folder in each <code>app</code> or <code>package</code> and use following directory structure convention. <code>__tests__</code> folder for <code>apps</code> has <code>unit</code> and <code>integration</code> subfolders as it will most likely have more then unit tests. While unit tests for <code>packages</code> are located directly in <code>__tests__</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├─ apps</span></span>
<span class="line"><span>│  └─ {application}</span></span>
<span class="line"><span>│     └─ __tests__</span></span>
<span class="line"><span>│        ├─ unit</span></span>
<span class="line"><span>│           └─ my-function1.spec.ts</span></span>
<span class="line"><span>│        └─ integration</span></span>
<span class="line"><span>│           └─ my-function2.spec.ts</span></span>
<span class="line"><span>├─ packages</span></span>
<span class="line"><span>   └─ {package}</span></span>
<span class="line"><span>      └─ __tests__</span></span>
<span class="line"><span>        └─ my-function3.spec.ts</span></span></code></pre></div><h2 id="unit-tests" tabindex="-1">Unit tests <a class="header-anchor" href="#unit-tests" aria-label="Permalink to &quot;Unit tests&quot;">​</a></h2><p>Use following commands to run unit tests across repository and trigger tests in <code>__tests__</code> folders and <code>__tests__/unit</code> folders for <code>packages</code> and <code>apps</code>, respectively. <code>Jest</code> will search for all files with <code>.spec.ts</code> extension.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:unit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:unit:watch</span></span></code></pre></div><h2 id="integration-tests" tabindex="-1">Integration tests <a class="header-anchor" href="#integration-tests" aria-label="Permalink to &quot;Integration tests&quot;">​</a></h2><p>Integration tests can be run with following commands. At the moment, there are <code>API Server</code> and <code>Portal</code> integration tests, so it re-triggers the <code>app</code> internal command.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:integration</span></span></code></pre></div><h2 id="api-server" tabindex="-1">API Server <a class="header-anchor" href="#api-server" aria-label="Permalink to &quot;API Server&quot;">​</a></h2><p>To run unit and integration tests on your local machine, start by copying your <code>.env</code> file to <code>__tests__/.env-test</code>.</p><p>Make sure to edit the <code>.env-test</code> file and change the database settings to point to test databases instead of your normal development ones. The foods and system test databases should be empty databases with the necessary extensions (e.g., <code>uuid-ossp</code>) installed.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p><strong>Do not run any tests</strong> unless you&#39;re sure that the database configuration settings in the <code>.env-test</code> file are correct because the test framework setup code will <strong>destroy all data</strong> in those databases!</p></div><p>If using the development VM, simply copy <code>__tests__/.env-test-dev-vm</code> to <code>__tests__/.env-test</code> and you&#39;re good to go.</p><p>Backend testing is set up for <code>unit</code> and <code>integration</code> tests. You can run tests with following commands.</p><p>Unit tests</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:unit</span></span></code></pre></div><p>Unit tests watch for development</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:unit:watch</span></span></code></pre></div><p>Integration tests</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:integration</span></span></code></pre></div><p>Integration tests watch for development</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:integration:watch</span></span></code></pre></div><h2 id="admin-survey-apps" tabindex="-1">Admin &amp; Survey apps <a class="header-anchor" href="#admin-survey-apps" aria-label="Permalink to &quot;Admin &amp; Survey apps&quot;">​</a></h2><p>Front-ends use Vue.js Jest implementation, so you can run tests with:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div>`,29),o=[i];function p(l,d,c,r,h,g){return t(),e("div",null,o)}const m=s(n,[["render",p]]);export{k as __pageData,m as default};
