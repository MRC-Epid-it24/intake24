import{_ as s,c as a,o,ag as t}from"./chunks/framework.CSeR4K32.js";const k=JSON.parse('{"title":"Development using Docker","description":"","frontmatter":{},"headers":[],"relativePath":"developer/docker.md","filePath":"developer/docker.md"}'),i={name:"developer/docker.md"};function n(d,e,r,c,l,p){return o(),a("div",null,e[0]||(e[0]=[t('<h1 id="development-using-docker" tabindex="-1">Development using Docker <a class="header-anchor" href="#development-using-docker" aria-label="Permalink to &quot;Development using Docker&quot;">​</a></h1><p>The more preferred approach is to use OCL-compatible platform like Docker to deploy and run the database systems needed to run Intake24 development.</p><p>Using containers to deploy databases allow you to run Intake24 development environment in local using less resource. The <code>init</code> script run along with docker compose script will create the sample databases and schemas in PostgreSQL for you. However, here we also provide steps to import data of <code>foods</code> and <code>system</code> databaes by yourself.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>Intake24 provided <code>docker-compose.yml</code>. Once you have installed compatible container platform (Intake24 uses Docker), you can navigate to <code>/docker</code> folder and execute docker compose script by</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>After that, you should have PostgreSQL and Redis server set to bind with corresponding host ports (<code>5432</code> to PostgreSQL, <code>6379</code> to Redis)</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The script may fail if you have existing services running on these ports</p></div><p>Once it is completed, you can use the <code>redis-cli</code> to connect to and test the Redis server, e.g. using <code>PING</code> command. This should return <code>PONG</code> if the connection is successful.</p><h4 id="logs" tabindex="-1">Logs <a class="header-anchor" href="#logs" aria-label="Permalink to &quot;Logs&quot;">​</a></h4><p>The PostgreSQL server log can be found in:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">postgres-container-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Replace <code>&lt;postgres-container-name&gt;</code> by the postgreSQL container id.</p>',13)]))}const u=s(i,[["render",n]]);export{k as __pageData,u as default};
