import type { NextFunction, Request, Response } from 'express';

import { ValidationError } from '@intake24/api/http/errors';

const fileKeyRegex = /^([a-z]\w*)\[(\d)+\]$/i;

const allowedImageMimeTypes = ['image/jpeg', 'image/webp'];

/*
Uploaded image files are assigned to fields named "baseImage[x]" where x is the drinkware object ID
that should receive the new image.

This naming pattern is produced by Axios on the client side, but Multer doesn't seem to be able
to parse it (via multer.array()).

This function extracts object IDs from the field names as generated by Axios and adds a field
"baseImageFiles" to the request object that holds a map objectID -> new image file.

Additionally, it validates file MIME types since it's awkward to validate using express-validator.
 */
export default (req: Request, res: Response, next: NextFunction) => {
  const { i18nService } = req.scope.cradle;

  if (req.files === undefined)
    return next();

  req.body.baseImageFiles = {};

  const files = Array.isArray(req.files)
    ? req.files
    : Object.entries(req.files).flatMap(e => e[1]);

  for (const file of files) {
    const fieldName = file.fieldname;
    const matches = fieldName.match(fileKeyRegex);

    if (matches === null || matches.length !== 3 || matches[1] !== 'baseImage') {
      throw new ValidationError(
        i18nService.translate('validation.types.regEx_', { attribute: fieldName }),
        {
          type: 'field',
          location: 'body',
          path: fieldName,
        },
      );
    }

    if (!allowedImageMimeTypes.includes(file.mimetype)) {
      throw new ValidationError(
        i18nService.translate('validation.types.file.mime', {
          attribute: fieldName,
          mime: allowedImageMimeTypes.join(', '),
        }),
        {
          type: 'field',
          location: 'body',
          path: fieldName,
          value: file.mimetype,
        },
      );
    }

    const scaleId = matches[2];

    if (req.body.baseImageFiles[scaleId] !== undefined) {
      throw new ValidationError(
        i18nService.translate('validation.types.duplicate._', { attribute: fieldName }),
        {
          type: 'field',
          location: 'body',
          path: fieldName,
        },
      );
    }

    req.body.baseImageFiles[scaleId] = file;
  }

  next();
};
