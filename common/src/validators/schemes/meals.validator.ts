/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from 'util';
import Ajv = require('ajv');
import { Meals } from '../../types/meals';
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: 'fast',
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export { Meals };
export const MealsSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  definitions: {
    T: {
      defaultProperties: [],
      type: ['null', 'string'],
    },
  },
  items: {
    defaultProperties: [],
    properties: {
      name: {
        additionalProperties: {
          $ref: '#/definitions/T',
        },
        defaultProperties: [],
        properties: {
          en: {
            type: ['null', 'string'],
          },
        },
        required: ['en'],
        type: 'object',
      },
      time: {
        type: 'string',
      },
    },
    required: ['name', 'time'],
    type: 'object',
  },
  type: 'array',
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, 'errors'>;
export const isMeals = ajv.compile(MealsSchema) as ValidateFunction<Meals>;
export default function validate(value: unknown): Meals {
  if (isMeals(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isMeals.errors!.filter((e: any) => e.keyword !== 'if'),
        { dataVar: 'Meals' }
      ) +
        '\n\n' +
        inspect(value)
    );
  }
}
