/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from 'util';
import Ajv = require('ajv');
import { PushSubscription } from '../types/models/system/user-subscriptions';
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: 'fast',
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export { PushSubscription };
export const PushSubscriptionSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  additionalProperties: false,
  defaultProperties: [],
  properties: {
    endpoint: {
      type: 'string',
    },
    expirationTime: {
      anyOf: [
        {
          description: 'Enables basic storage and retrieval of dates and times.',
          format: 'date-time',
          type: 'string',
        },
        {
          type: ['null', 'number'],
        },
      ],
    },
    keys: {
      additionalProperties: false,
      defaultProperties: [],
      properties: {
        auth: {
          type: 'string',
        },
        p256dh: {
          type: 'string',
        },
      },
      required: ['auth', 'p256dh'],
      type: 'object',
    },
  },
  required: ['endpoint', 'keys'],
  type: 'object',
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, 'errors'>;
export const isPushSubscription = ajv.compile(
  PushSubscriptionSchema
) as ValidateFunction<PushSubscription>;
export default function validate(value: unknown): PushSubscription {
  if (isPushSubscription(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isPushSubscription.errors!.filter((e: any) => e.keyword !== 'if'),
        { dataVar: 'PushSubscription' }
      ) +
        '\n\n' +
        inspect(value)
    );
  }
}
