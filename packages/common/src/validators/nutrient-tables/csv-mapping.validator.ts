/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from 'util';
import Ajv = require('ajv');
import { NutrientTableCsvMappingInput } from '../../types/http/admin/nutrient-tables';
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: 'fast',
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export { NutrientTableCsvMappingInput };
export const NutrientTableCsvMappingInputSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  defaultProperties: [],
  properties: {
    descriptionColumnOffset: {
      type: 'number',
    },
    idColumnOffset: {
      type: 'number',
    },
    localDescriptionColumnOffset: {
      type: ['null', 'number'],
    },
    rowOffset: {
      type: 'number',
    },
  },
  required: [
    'descriptionColumnOffset',
    'idColumnOffset',
    'localDescriptionColumnOffset',
    'rowOffset',
  ],
  type: 'object',
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, 'errors'>;
export const isNutrientTableCsvMappingInput = ajv.compile(
  NutrientTableCsvMappingInputSchema
) as ValidateFunction<NutrientTableCsvMappingInput>;
export default function validate(value: unknown): NutrientTableCsvMappingInput {
  if (isNutrientTableCsvMappingInput(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isNutrientTableCsvMappingInput.errors!.filter((e: any) => e.keyword !== 'if'),
        { dataVar: 'NutrientTableCsvMappingInput' }
      ) +
        '\n\n' +
        inspect(value)
    );
  }
}
